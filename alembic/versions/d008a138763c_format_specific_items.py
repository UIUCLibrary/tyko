"""format specific items

Revision ID: d008a138763c
Revises: 364bf8893123
Create Date: 2020-04-29 10:26:13.256977

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd008a138763c'
down_revision = '364bf8893123'
branch_labels = None
depends_on = None


def create_samples(connection):
    # (`avdatabase`.
    #  `tyko_object`, CONSTRAINT `tyko_object_ibfk_1` FOREIGN KEY (
    #  `collection_id`)
    # REFERENCES
    # `collection`(`collection_id` ))
    print("Creating sample records")
    connection.execute('''
            INSERT INTO tyko_object (
                name, 
                collection_id, 
                project_id,
                barcode, 
                originals_rec_date, 
                originals_return_date
                )
            VALUES ("sample cassette, Jim, 28 March 1998", 
                (
                    SELECT collection_id 
                    FROM collection 
                    WHERE collection_name = "Sample collection"
                ), 
                (
                    SELECT project_id 
                    FROM project 
                    WHERE title = "Sample Project"
                ),
                "SAMPLE0003",
                "2019-10-20",
                "2019-11-25"
            )
        ''')

    connection.execute('''
                INSERT INTO formats (
                    name, 
                    obj_sequence, 
                    object_id
                    )
                VALUES (
                    "cassette one Anderson, Jim, 28 March 1998, Tape 1", 
                    "1", 
                    (
                        SELECT object_id 
                        FROM tyko_object 
                        WHERE name = "sample cassette, Jim, 28 March 1998"
                    )
                ) 
        ''')

    connection.execute('''
                INSERT INTO audio_cassettes (
                    table_id, cassette_format_type_id, tape_type_id, tape_thickness_id, inspection_date, recording_date, recording_date_precision
                    )
                VALUES (
                    (
                        SELECT item_id 
                        FROM formats 
                        WHERE name = "cassette one Anderson, Jim, 28 March 1998, Tape 1"
                    ),
                    (
                        SELECT table_id
                        FROM cassette_types
                        WHERE name = "compact cassette" 
                    ),
                    (
                        SELECT table_id
                        FROM cassette_tape_types
                        WHERE name = "II" 
                    ),
                    
                    (
                        SELECT table_id
                        FROM cassette_tape_thickness
                        WHERE value = "1.5" 
                    ),
                    "2019-10-20",
                    "1990-01-01",
                    1
                ) 
        ''')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:

        create_new_tables()

    except sa.exc.OperationalError:
        new_tables = [
            "audio_cassettes",
            "audio_videos",
            "cassette_tape_types",
            "cassette_tape_thickness",
            "cassette_types",
            "films",
            "formats",
            "items",
            "open_reels",
            "tyko_object",
            "grooved_discs"

        ]

        for table in new_tables:
            try:
                op.drop_table(table)
                print(f"Dropped {table}")

            except sa.exc.NoSuchTableError:
                print(f"{table} already dropped")
        raise
    connection = op.get_bind()
    connection.execute('''
        INSERT INTO format_types (name)
        VALUES ("cassette tape");
        
    ''')
    connection.execute('''
        INSERT INTO formats (name, item_id, obj_sequence,  format_type_id, object_id)
        SELECT name,  item_id, obj_sequence, format_type_id, object_id
        FROM item;
        ''')

    connection.execute('''                
        INSERT INTO open_reels (
            table_id, 
            date_recorded, 
            track_count, 
            tape_size,
            reel_diam,
            reel_type,
            tape_thickness,
            tape_brand,
            base,
            wind,
            track_speed,
            track_configuration,
            track_duration,
            generation
            )
        SELECT 
            item.item_id, 
            date_recorded, 
            track_count, 
            tape_size, 
            reel_diam, 
            reel_type, 
            tape_thickness, 
            tape_brand, 
            base,
            wind,
            track_speed,
            track_configuration,
            track_duration,
            generation
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        INNER JOIN open_reel AS o on item.item_id = o.item_id
        WHERE ft.name = 'open reel';
        ''')

    # Migrate films
    connection.execute('''                
        INSERT INTO films (
            table_id,
            date_of_film,
            can_label,
            leader_label,
            length,
            duration,
            format_gauge,
            base,
            edge_code_date,
            sound,
            color,
            image_type,
            ad_test_date,
            ad_test_level
            )
        SELECT 
            item.item_id,
            date_of_film,
            can_label,
            leader_label,
            length,
            duration,
            format_gauge,
            base,
            edge_code_date,
            sound,
            color,
            image_type,
            ad_test_date,
            ad_test_level
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        INNER JOIN film AS o on item.item_id = o.item_id
        WHERE ft.name = 'film';
        ''')

    # Migrate audio_video
    connection.execute('''                
        INSERT INTO audio_videos (
            table_id,
            date_recorded,
            side,
            duration,
            format_subtype
            )
        SELECT 
            item.item_id,
            date_recorded,
            side,
            duration,
            format_subtype
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        INNER JOIN audio_video AS o on item.item_id = o.item_id
        WHERE ft.name = 'audio video';
        ''')

    # Migrate video
    connection.execute('''                
        INSERT INTO audio_videos (
            table_id
            )
        SELECT 
            item.item_id
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        # INNER JOIN audio_video AS o on item.item_id = o.item_id
        WHERE ft.name = 'video';
        ''')

    # Migrate audio
    connection.execute('''                
        INSERT INTO audio_videos (
            table_id
            )
        SELECT 
            item.item_id
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        # INNER JOIN audio_video AS o on item.item_id = o.item_id
        WHERE ft.name = 'audio';
        ''')

    # Migrate groove disc
    connection.execute('''                
        INSERT INTO grooved_discs (
            table_id,
            date_recorded,
            side,
            duration,
            diameter,
            disc_material,
            base,
            playback_direction,
            playback_speed
            )
        SELECT 
            item.item_id,
            date_recorded,
            side,
            duration,
            diameter,
            disc_material,
            base,
            playback_direction,
            playback_speed
        FROM item 
        INNER JOIN format_types AS ft ON item.format_type_id = ft.format_id
        INNER JOIN grooved_disc AS o on item.item_id = o.item_id
        WHERE ft.name = 'grooved disc';
        ''')

    # Migrate the rest
    connection.execute('''                
        INSERT INTO items (
            table_id
            )
        SELECT 
            item.item_id
        FROM item 
        WHERE format_type_id is NULL;
        ''')

    naming_convention = {
        "fk":
            "%%(referred_table_name)s_fk",
    }

    with op.batch_alter_table("file_annotations") as t:
        t.alter_column('type_id',
                       existing_type=sa.INTEGER(),
                       nullable=True)

    with op.batch_alter_table("instantiation_files",
                              naming_convention=naming_convention) as t:

        t.alter_column('source',
                       existing_type=sa.TEXT(),
                       nullable=True)

        t.drop_constraint("instantiation_files_ibfk_1", type_='foreignkey')

        t.create_foreign_key("fk_format_item_id",
                             local_cols=['item_id'],
                             remote_cols=['item_id'],
                             referent_table="formats"
                             )

    with op.batch_alter_table("treatment",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('treatment_ibfk_1', type_='foreignkey')
        t.create_foreign_key("fk_treatment",
                             local_cols=['item_id'],
                             remote_cols=['item_id'],
                             referent_table="formats"
                             )

    with op.batch_alter_table("item_has_contacts",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('item_has_contacts_ibfk_2', type_='foreignkey')

        t.create_foreign_key("fk_item_has_contacts_item_id_items",
                              local_cols=['item_id'],
                              remote_cols=['item_id'],
                              referent_table="formats"
                              )
    with op.batch_alter_table("item_has_notes",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('item_has_notes_ibfk_2', type_='foreignkey')
        t.create_foreign_key("fk_item_has_notes_item_id_items",
                             local_cols=['item_id'],
                             remote_cols=['item_id'],
                             referent_table="formats"
                             )
    connection.execute('''
            INSERT INTO tyko_object (
                name, 
                object_id, 
                barcode, 
                collection_id, 
                project_id, 
                originals_return_date, 
                originals_rec_date, 
                contact_id
                )  
            SELECT 
                name, 
                object_id, 
                barcode, 
                collection_id, 
                project_id, 
                originals_return_date, 
                originals_rec_date, 
                contact_id
            FROM object;
            ''')

    with op.batch_alter_table("object_has_notes",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('object_has_notes_ibfk_2', type_='foreignkey')
        t.create_foreign_key("fk_object_has_notes_object_id_object",
                             local_cols=['object_id'],
                             remote_cols=['object_id'],
                             referent_table="tyko_object"
                             )

    op.create_foreign_key(None, 'project', 'project_status_type', ['status_id'], ['project_status_id'])



    with op.batch_alter_table("vendor_transfer_has_an_object",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('vendor_transfer_has_an_object_ibfk_1', type_='foreignkey')
        t.create_foreign_key("fk_vendor_transfer_has_an_object_id",
                             local_cols=['object_id'],
                             remote_cols=['object_id'],
                             referent_table="tyko_object"
                             )

    with op.batch_alter_table("item_has_contacts",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('item_has_contacts_ibfk_1', type_='foreignkey')
        t.create_foreign_key("item_has_contacts_ibfk_1",
                             local_cols=['contact_id'],
                             remote_cols=['contact_id'],
                             referent_table="contact"
                             )

    with op.batch_alter_table("item",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('item_ibfk_1', type_='foreignkey')
        t.drop_constraint('item_ibfk_2', type_='foreignkey')


    with op.batch_alter_table("object",
                              naming_convention=naming_convention) as t:
        t.drop_constraint('object_ibfk_1', type_='foreignkey')
        t.drop_constraint('object_ibfk_2', type_='foreignkey')
    print("Migrating Data")

    op.drop_table('open_reel')
    op.drop_table('audio_video')
    op.drop_table('grooved_disc')
    op.drop_table('film')
    op.drop_table('object')
    op.drop_table('item')
    
    create_samples(connection)
    # ### end Alembic commands ###


def create_new_tables():
    cassette_tape_thickness = op.create_table('cassette_tape_thickness',
                    sa.Column('table_id', sa.Integer(), autoincrement=True,
                              nullable=False),
                    sa.Column('value', sa.Text(), nullable=False),
                    sa.Column('unit', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('table_id')
                    )
    op.bulk_insert(
        cassette_tape_thickness,
        [
            {
                "value": "0.5",
                "unit": "mm"
            },
            {
                "value": "1.0",
                "unit": "mm"
            },
            {
                "value": "1.5",
                "unit": "mm"
            },
            {
                "value": "unknown",
                "unit": None
            },
        ]
    )
    cassette_tape_type = op.create_table('cassette_tape_types',
                    sa.Column('table_id', sa.Integer(), autoincrement=True,
                              nullable=False),
                    sa.Column('name', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('table_id')
                    )

    op.bulk_insert(
        cassette_tape_type,
        [
            {"name": "I"},
            {"name": "II"},
            {"name": "IV"},
        ]
    )

    cassette_type_types = op.create_table('cassette_types',
                    sa.Column('table_id', sa.Integer(), autoincrement=True,
                              nullable=False),
                    sa.Column('name', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('table_id')
                    )
    op.bulk_insert(cassette_type_types, [
        {"name": "compact cassette"},
        {"name": "DAT"},
        {"name": "ADAT"},
        {"name": "Other"},
    ])
    op.create_table('tyko_object',
                    sa.Column('object_id', sa.Integer(), autoincrement=True,
                              nullable=False),
                    sa.Column('name', sa.Text(), nullable=True),
                    sa.Column('barcode', sa.Text(), nullable=True),
                    sa.Column('collection_id', sa.Integer(), nullable=True),
                    sa.Column('project_id', sa.Integer(), nullable=True),
                    sa.Column('originals_rec_date', sa.Date(), nullable=True),
                    sa.Column('originals_return_date', sa.Date(),
                              nullable=True),
                    sa.Column('contact_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['collection_id'],
                                            ['collection.collection_id'], ),
                    sa.ForeignKeyConstraint(['contact_id'],
                                            ['contact.contact_id'], ),
                    sa.ForeignKeyConstraint(['project_id'],
                                            ['project.project_id'], ),
                    sa.PrimaryKeyConstraint('object_id')
                    )
    op.create_table('formats',
                    sa.Column('name', sa.Text(), nullable=True),
                    sa.Column('type', sa.Text(), nullable=True),
                    sa.Column('item_id', sa.Integer(), autoincrement=True,
                              nullable=False),
                    sa.Column('obj_sequence', sa.Integer(), nullable=True),
                    sa.Column('object_id', sa.Integer(), nullable=True),
                    sa.Column('format_type_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['format_type_id'],
                                            ['format_types.format_id'], ),
                    # sa.ForeignKeyConstraint(['object_id'],
                    #                         ['tyko_object.object_id'], ),
                    sa.PrimaryKeyConstraint('item_id')
                    )
    op.create_table('audio_cassettes',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('cassette_format_type_id', sa.Integer(),
                              nullable=True),
                    sa.Column('tape_type_id', sa.Integer(), nullable=True),
                    sa.Column('tape_thickness_id', sa.Integer(), nullable=True),
                    sa.Column('inspection_date', sa.Date(), nullable=True),
                    sa.Column('recording_date', sa.Date(), nullable=True),
                    sa.Column('recording_date_precision', sa.Integer(),
                              nullable=True),
                    sa.ForeignKeyConstraint(['cassette_format_type_id'],
                                            ['cassette_types.table_id'], ),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.ForeignKeyConstraint(['tape_thickness_id'], [
                        'cassette_tape_thickness.table_id'], ),
                    sa.ForeignKeyConstraint(['tape_type_id'],
                                            ['cassette_tape_types.table_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )
    op.create_table('audio_videos',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('date_recorded', sa.Date(),
                              nullable=True),
                    sa.Column('side', sa.Text(), nullable=True),
                    sa.Column('duration', sa.Text(), nullable=True),
                    sa.Column('format_subtype', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )
    op.create_table('films',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('date_of_film', sa.Date(), nullable=True),
                    sa.Column('can_label', sa.Text(), nullable=True),
                    sa.Column('leader_label', sa.Text(), nullable=True),
                    sa.Column('length', sa.Integer(), nullable=True),
                    sa.Column('duration', sa.Text(), nullable=True),
                    sa.Column('format_gauge', sa.Integer(), nullable=True),
                    sa.Column('base', sa.Text(), nullable=True),
                    sa.Column('edge_code_date', sa.Date(), nullable=True),
                    sa.Column('sound', sa.Text(), nullable=True),
                    sa.Column('color', sa.Text(), nullable=True),
                    sa.Column('image_type', sa.Text(), nullable=True),
                    sa.Column('ad_test_date', sa.Date(), nullable=True),
                    sa.Column('ad_test_level', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )
    op.create_table('grooved_discs',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('date_recorded', sa.Integer(), nullable=True),
                    sa.Column('side', sa.Text(), nullable=True),
                    sa.Column('duration', sa.Text(), nullable=True),
                    sa.Column('diameter', sa.Integer(), nullable=True),
                    sa.Column('disc_material', sa.Text(), nullable=True),
                    sa.Column('base', sa.Text(), nullable=True),
                    sa.Column('playback_direction', sa.Text(), nullable=True),
                    sa.Column('playback_speed', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )

    op.create_table('items',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )

    op.create_table('open_reels',
                    sa.Column('table_id', sa.Integer(), nullable=False),
                    sa.Column('date_recorded', sa.Date(), nullable=True),
                    sa.Column('track_count', sa.Text(), nullable=True),
                    sa.Column('tape_size', sa.Text(), nullable=True),
                    sa.Column('reel_diam', sa.Integer(), nullable=True),
                    sa.Column('reel_type', sa.Text(), nullable=True),
                    sa.Column('tape_thickness', sa.Integer(), nullable=True),
                    sa.Column('tape_brand', sa.Text(), nullable=True),
                    sa.Column('base', sa.Text(), nullable=True),
                    sa.Column('wind', sa.Text(), nullable=True),
                    sa.Column('track_speed', sa.Text(), nullable=True),
                    sa.Column('track_configuration', sa.Text(), nullable=True),
                    sa.Column('track_duration', sa.Text(), nullable=True),
                    sa.Column('generation', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['table_id'],
                                            ['formats.item_id'], ),
                    sa.PrimaryKeyConstraint('table_id')
                    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'vendor_transfer_has_an_object', type_='foreignkey')
    op.create_foreign_key(None, 'vendor_transfer_has_an_object', 'object', ['object_id'], ['object_id'])
    op.drop_constraint(None, 'treatment', type_='foreignkey')
    op.create_foreign_key(None, 'treatment', 'item', ['item_id'], ['item_id'])
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.drop_constraint(None, 'object_has_notes', type_='foreignkey')
    op.create_foreign_key(None, 'object_has_notes', 'object', ['object_id'], ['object_id'])
    op.drop_constraint(None, 'item_has_notes', type_='foreignkey')
    op.create_foreign_key(None, 'item_has_notes', 'item', ['item_id'], ['item_id'])
    op.drop_constraint(None, 'item_has_contacts', type_='foreignkey')
    op.create_foreign_key(None, 'item_has_contacts', 'item', ['contact_id'], ['item_id'])
    op.drop_constraint(None, 'instantiation_files', type_='foreignkey')
    op.create_foreign_key(None, 'instantiation_files', 'item', ['item_id'], ['item_id'])
    op.alter_column('instantiation_files', 'source',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('file_annotations', 'type_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    op.create_table('item',
    sa.Column('item_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.TEXT(), nullable=True),
    sa.Column('medusa_uuid', sa.TEXT(), nullable=True),
    sa.Column('object_id', sa.INTEGER(), nullable=True),
    sa.Column('obj_sequence', sa.INTEGER(), nullable=True),
    sa.Column('format_type_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['format_type_id'], ['format_types.format_id'], ),
    sa.ForeignKeyConstraint(['object_id'], ['object.object_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_table('object',
    sa.Column('object_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.TEXT(), nullable=True),
    sa.Column('barcode', sa.TEXT(), nullable=True),
    sa.Column('collection_id', sa.INTEGER(), nullable=True),
    sa.Column('project_id', sa.INTEGER(), nullable=True),
    sa.Column('originals_rec_date', sa.DATE(), nullable=True),
    sa.Column('originals_return_date', sa.DATE(), nullable=True),
    sa.Column('contact_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collection.collection_id'], ),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.contact_id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.project_id'], ),
    sa.PrimaryKeyConstraint('object_id')
    )
    op.create_table('film',
    sa.Column('item_id', sa.INTEGER(), nullable=False),
    sa.Column('date_of_film', sa.DATE(), nullable=True),
    sa.Column('can_label', sa.TEXT(), nullable=True),
    sa.Column('leader_label', sa.TEXT(), nullable=True),
    sa.Column('length', sa.INTEGER(), nullable=True),
    sa.Column('duration', sa.TEXT(), nullable=True),
    sa.Column('format_gauge', sa.INTEGER(), nullable=True),
    sa.Column('base', sa.TEXT(), nullable=True),
    sa.Column('edge_code_date', sa.DATE(), nullable=True),
    sa.Column('sound', sa.TEXT(), nullable=True),
    sa.Column('color', sa.TEXT(), nullable=True),
    sa.Column('image_type', sa.TEXT(), nullable=True),
    sa.Column('ad_test_date', sa.DATE(), nullable=True),
    sa.Column('ad_test_level', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_table('grooved_disc',
    sa.Column('item_id', sa.INTEGER(), nullable=False),
    sa.Column('date_recorded', sa.INTEGER(), nullable=True),
    sa.Column('side', sa.TEXT(), nullable=True),
    sa.Column('duration', sa.TEXT(), nullable=True),
    sa.Column('diameter', sa.INTEGER(), nullable=True),
    sa.Column('disc_material', sa.TEXT(), nullable=True),
    sa.Column('base', sa.TEXT(), nullable=True),
    sa.Column('playback_direction', sa.TEXT(), nullable=True),
    sa.Column('playback_speed', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_table('audio_video',
    sa.Column('item_id', sa.INTEGER(), nullable=False),
    sa.Column('date_recorded', sa.DATE(), nullable=True),
    sa.Column('side', sa.TEXT(), nullable=True),
    sa.Column('duration', sa.TEXT(), nullable=True),
    sa.Column('format_subtype', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_table('open_reel',
    sa.Column('item_id', sa.INTEGER(), nullable=False),
    sa.Column('date_recorded', sa.DATE(), nullable=True),
    sa.Column('track_count', sa.TEXT(), nullable=True),
    sa.Column('tape_size', sa.TEXT(), nullable=True),
    sa.Column('reel_diam', sa.INTEGER(), nullable=True),
    sa.Column('reel_type', sa.TEXT(), nullable=True),
    sa.Column('tape_thickness', sa.INTEGER(), nullable=True),
    sa.Column('tape_brand', sa.TEXT(), nullable=True),
    sa.Column('base', sa.TEXT(), nullable=True),
    sa.Column('wind', sa.TEXT(), nullable=True),
    sa.Column('track_speed', sa.TEXT(), nullable=True),
    sa.Column('track_configuration', sa.TEXT(), nullable=True),
    sa.Column('track_duration', sa.TEXT(), nullable=True),
    sa.Column('generation', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.drop_table('open_reels')
    op.drop_table('items')
    op.drop_table('grooved_discs')
    op.drop_table('films')
    op.drop_table('audio_videos')
    op.drop_table('audio_cassettes')
    op.drop_table('formats')
    op.drop_table('tyko_object')
    op.drop_table('cassette_types')
    op.drop_table('cassette_tape_types')
    op.drop_table('cassette_tape_thickness')
    # ### end Alembic commands ###
