"""make project status a enumuration

Revision ID: a6f912f5e00f
Revises: 
Create Date: 2020-03-30 13:59:12.603514

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session
from sqlalchemy.sql import table

# revision identifiers, used by Alembic.
revision = 'a6f912f5e00f'
down_revision = None
branch_labels = None
depends_on = None


class ReplaceableObject:
    def __init__(self, name, sqltext):
        self.name = name
        self.sqltext = sqltext


status_types = ReplaceableObject(
    "customer_view",
    "SELECT DISTINCT status FROM project;"
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    status_table = op.create_table('project_status_type',
    sa.Column('project_status_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('project_status_id')
    )
    conn = op.get_bind()

    project_status_data = []
    for data_type in conn.execute("SELECT DISTINCT status FROM project;"):
        project_status_data.append({'name': data_type[0]})

    op.bulk_insert(status_table, project_status_data)

    for project in conn.execute("SELECT * FROM project;"):
        print(project)
    #     TODO: updated project, so that the status_id matches the status_id from project_status_type table

    op.drop_column('project', 'status')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('project', sa.Column('status', sa.TEXT(), nullable=True))
    # op.drop_constraint(None, 'project', type_='foreignkey')
    # op.drop_column('project', 'status_id')
    op.drop_table('project_status_type')
    # TODO: covert projects status to equal the value of the matching status.id from the project_status_type table
    # ### end Alembic commands ###
